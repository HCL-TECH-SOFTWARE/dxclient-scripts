#!/bin/bash
#/*
#********************************************************************
#* Licenses Materials - Property of HCL                             *
#*                                                                  *
#* Copyright HCL Technologies Ltd. 2021, 2024. All Rights Reserved. *
#*                                                                  *
#* Note to US Government Users Restricted Rights:                   *
#*                                                                  *
#* Use, duplication or disclosure restricted by GSA ADP Schedule    *
#********************************************************************
#*/
#
# The script is a wrapper to run dxclient tool.
#

IMAGE_NAME="hclcr.io/dx-public/dxclient"
IMAGE_TAG="<IMAGE_TAG>"
DXCLIENT="dxclient"
DATA_DIR="store"
MOUNT_LIST=
regEx="[[:space:]]+" # matches a string with atleast one space character in it.

# provides users option to set Volume directory
if [ ! "$VOLUME_DIR" ]
then
  VOLUME_DIR="store"
fi
# provides users option to set their own container runtime
if [ ! $CONTAINER_RUNTIME ]
then
  CONTAINER_RUNTIME=docker
fi

# Check if we are running in a tty, assuming tty as default
TTY_FLAG="-it"
# Check for tty, silently
tty > /dev/null 2>&1
# Get return value
retVal=$?
if [ $retVal -ne 0 ]; then
  TTY_FLAG=""
fi

# Guards (checks for dependencies) 
check_cmd_in_path() {
  cmd=$1
  if ! $cmd -v &> /dev/null
  then
    echo "$cmd not found!"
    exit
  fi
}

# function to convert relative to absolute path
getAbsolutePath() {
  localPath=$1
  if [[ "${localPath:0:1}" != "/" && "${localPath:0:1}" != "~" ]]; then
      if [[ -f "${localPath}" ]] ; then
        # Path detected as a file
        localFolder=${localPath%/*}
        cd "$localFolder"
        localPath="$(pwd)"/$(basename "$localPath")
      elif [[ -d "${localPath}" ]] ; then
        cd "$localPath"
        localPath="$(pwd)"
      fi
  fi
  echo "${localPath}"
}

check_cmd_in_path $CONTAINER_RUNTIME

# extract execution command arguments into a variable
execCmd=("$@")
copyOfExecCmd=("$@")
hostPath=$(pwd)

#creates volume directory if not present
if [ ! -d "$(pwd)/$VOLUME_DIR" ]; then
    mkdir "$(pwd)/$VOLUME_DIR"
fi

# Set initial volume parameter & container folder
containerFolder=/$DXCLIENT/$VOLUME_DIR
volumeParams="-v \"$(pwd)/$VOLUME_DIR:/${containerFolder}\":Z"

# Generate a separate volume for each folder or file in the parameter
# Replace the folders in the parameter with the assigned container folder in volume parameter
for i in "${!execCmd[@]}"; do
    # Check if -exportPath exist
    if [[ "${execCmd[$i]}" == "-exportPath" || "${execCmd[$i]}" == "-themePath" ]]; then
      # then pass the value of exportPath, themePath to hostPath variable that is passed also as env
      hostPath=${execCmd[$i+1]}
    fi
    if [[ -e ${execCmd[$i]} ]] && [[ "${execCmd[$i]}" == *"/"* ]]; then
         # Check if relative path and convert to absolute
        localPath=${execCmd[$i]}
        localPath=$(getAbsolutePath "${localPath}")

        # Add input to the mount list
        MOUNT_LIST+=$localPath

        # add this folder/filepath to volume parameter
        volumeParams="${volumeParams} -v \"${localPath}\":\"${containerFolder}/$(basename "${localPath}")\":Z"

        # Replace parameter with the folder known to the container
        execCmd[$i]=\"${containerFolder}/$(basename "${localPath}")\"
    # the following else condition checks if space is present and enclose the string within quotes
    elif [[ ${execCmd[$i]} =~ $regEx ]]; then
      execCmd[$i]=\"${execCmd[$i]}\"
    fi
done

eval $CONTAINER_RUNTIME run -e DXCLIENT_RUNTIME=\"$CONTAINER_RUNTIME\" -e HOST_PATH=\"$hostPath\" -e VOLUME_DIR=\"$VOLUME_DIR\" -u="$(echo $UID)" $TTY_FLAG -e TZ=$Timezone $volumeParams --network="host" --platform linux/amd64 --name $DXCLIENT --rm ${IMAGE_NAME:?'Please set dxclient image name.'}:${IMAGE_TAG:?'Please set dxclient image tag.'} "./bin/dxclient" "${execCmd[@]}"


# Cleanup the files created in local volume/mount point if the command is livesync or export-assets
if [[ ${copyOfExecCmd[0]} == "livesync" || ${copyOfExecCmd[1]} == "export-assets" ]]; then
 for i in $MOUNT_LIST; do
    # Check if relative path and convert to absolute
    localPath=$(getAbsolutePath "${i}")
    if [[ -e ${localPath} ]]; then
      if [[ $localPath != $(getAbsolutePath "./${VOLUME_DIR}")* ]]; then
        rm -rf "$(pwd)/$VOLUME_DIR/$(basename "${localPath}")"
      fi
    fi
  done
fi
